/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package testfirewall;
import java.io.*;  
import java.net.*;
/**
 *
 * @author imSandipan
 */
public class firewallwindow extends javax.swing.JFrame {
static String msg,msg1;
static int[] cport={9999,2222,6789}; 
static int[] sport={5555,1111,4567};
//static Socket s;
    /**
     * Creates new form firewallwindow
     */
    public firewallwindow() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Firewall");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(firewallwindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(firewallwindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(firewallwindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(firewallwindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new firewallwindow().setVisible(true);
            }
        });
        try{
             ServerSocket ss=new ServerSocket(6666); 
             while(true)
             {
                 Socket s=ss.accept();
                 //System.out.println("Client Port "+s.getPort()+"\n"+"client Address "+s.getInetAddress()); 
                 String getport=String.valueOf(s.getPort());
                 jTextArea1.setText(jTextArea1.getText().trim()+"\nclient port "+getport+"\n");
                 
                 DataInputStream din1=new DataInputStream(s.getInputStream()); 
                 msg1=(String)din1.readUTF();
                 int intmsg=Integer.valueOf(msg1);
                 if(s.getPort()!=cport[0] && s.getPort()!=cport[1] && s.getPort()!=cport[2])
                {
	              if(intmsg!=sport[0] && intmsg!=sport[1] && intmsg!=sport[2])
		        {
	  	            Socket s2=new Socket("localhost",intmsg);
          	            DataInputStream din=new DataInputStream(s2.getInputStream()); 
	  	            msg=(String)din.readUTF();
		        }
	                else
	                {
                            msg="blocked by firewall";
                            jTextArea1.setText(jTextArea1.getText().trim()+"\nBlocked server port used "+intmsg+"\n");
		        }
                      jTextArea1.setText(jTextArea1.getText().trim()+"\n------------------------------------");
	        }
	        else
	        {
		         msg="blocked by firewall";
                         jTextArea1.setText(jTextArea1.getText().trim()+"\nBlocked client port used "+getport+"\n");
                         jTextArea1.setText(jTextArea1.getText().trim()+"\n------------------------------------");
	         }
                 
                 
             
        
             
        DataOutputStream dout=new DataOutputStream(s.getOutputStream());
        dout.writeUTF(msg);  
        dout.flush();  
        dout.close(); 
        
             }
             
        }
        catch(Exception e)
        {
            System.out.println("client"+e);
        }
        
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
